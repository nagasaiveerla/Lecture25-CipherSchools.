public class Recurssion
{
    static void printDescending(int n)
    {
        if(n<1) return  ;
        System.out.println(n);
        printDescending(n-1);
        
    }
    public static void main(String args[])
    {
        int n = 6;
        printDescending(n);
    }
}

/*public class Recurssion
{
    static void printDescending(int n)
    {
        //base condition ->telling it when to stop.
        if(n<1) return ;
        System.out.println(n);
        printDescending(n-1);
    }
    public static void main(String args[])
    {
         int n = 5;
         printDescending(n);
    }
}*/


//2.fibanacci series

public class fibanacci{

    static int fib(int n)
    {
        if(n<2)return n;
        int a = fib(n-1);
        int b = fib(n-2);
        return a +b;
    }
    public static void main(String args[])
    {
        int n = 4;
        System.out.println(fib(n));
    }
}


//3.binary search ->sorted array prerequsite to solve binary search
public class BinarySearch{
    public static void main(String args[])
    {
        int arr[] = { 2,5,8,12,16,23,38,56,72};
        int x = 23;
        //binary search below
        int l=0;//leftmost index
        int r = arr.length - 1;//right most index

        while(l<=r)
        {
            int mid = (r-1)/2 + 1;
            int mid = (l+r)/2;
            if(arr[mid]==x)
            {
                System.out.println("Value found at index:"+mid);
                return ;
            }
            else if(x<arr[mid])
            {
                r = mid -1;

            }
            else {
                l = mid +1;
            }
            System.out.println("value not found");
        }
    }
}
